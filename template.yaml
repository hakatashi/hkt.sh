AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  hkt.sh

Globals:
  Function:
    Timeout: 5

Parameters:
  GoogleAppId:
    Type : AWS::SSM::Parameter::Value<String>
    Default: HKT_SH_GOOGLE_APP_CLIENT_ID
  GoogleAppSecret:
    Type : AWS::SSM::Parameter::Value<String>
    Default: HKT_SH_GOOGLE_APP_CLIENT_SECRET

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        Authorizers:
          AdminCognitoAuthorizer:
            UserPoolArn: !GetAtt AdminCognitoUserPool.Arn
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 302
          ResponseParameters:
            Headers:
              Location: context.authorizer.location
          ResponseTemplates:
            application/json: '{"message": $context.error.messageString}'
  HomeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: home/home.zip
      Handler: home
      Runtime: go1.x
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EntriesTable
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /
            Method: GET
      Environment:
        Variables:
          AUTH_USER_POOL_CLIENT_ID: !Ref AdminCognitoUserPoolClient
          ASSETS_WEBSITE_DOMAIN_NAME: !GetAtt AssetsBucket.RegionalDomainName
  PutEntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put-entry/put-entry.zip
      Handler: put-entry
      Runtime: go1.x
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EntriesTable
        - DynamoDBWritePolicy:
            TableName: !Ref EntriesTable
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /admin/entry
            Method: PUT
            Auth:
              Authorizer: AdminCognitoAuthorizer
  EntryFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: entry/entry.zip
      Handler: entry
      Runtime: go1.x
      Tracing: Active
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref EntriesTable
      Events:
        CatchAll:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /{name}
            Method: GET
  AdminCognitoUserPool:
    Type: AWS::Cognito::UserPool
  AdminCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AdminCognitoUserPool
      GenerateSecret: false
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      CallbackURLs:
        - https://hkt.sh/
        - https://hkt.sh/admin
      LogoutURLs:
        - https://hkt.sh/admin
      SupportedIdentityProviders:
        - Google
  AdminCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref AdminCognitoUserPool
      Domain: hkt-sh-auth
  AdminCognitoUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref AdminCognitoUserPool
      ProviderName: Google
      ProviderDetails:
        client_id: !Ref GoogleAppId
        client_secret: !Ref GoogleAppSecret
        authorize_scopes: profile email openid
      ProviderType: Google
      AttributeMapping:
        email: email
  EntriesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Name
        Type: String
      TableName: hkt-sh-entries
  LinksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: Id
        Type: String
      TableName: hkt-sh-links
  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead

Outputs:
  BucketName:
    Description: "Bucket name of assets"
    Value: !Ref AssetsBucket
